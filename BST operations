#include <iostream>
#include <queue>
using namespace std;

struct Node
{
    int data;
    Node *left;
    Node *right;
};

Node *createNode(int value)
{
    Node *newNode = new Node();
    if (newNode)
    {
        newNode->data = value;
        newNode->left = newNode->right = NULL;
        return newNode;
    }
    else
    {
        cout << "Memory allocation failed!" << endl;
        return NULL;
    }
}

Node *insert(Node *root, int data)
{
    if (root == NULL)
    {
        root = createNode(data);
        return root;
    }

    if (data <= root->data)
    {
        root->left = insert(root->left, data);
    }
    else
    {
        root->right = insert(root->right, data);
    }

    return root;
}

int getHeight(Node *root)
{
    if (root == NULL)
        return 0;
    else
    {
        int leftHeight = getHeight(root->left);
        int rightHeight = getHeight(root->right);

        return max(leftHeight, rightHeight) + 1;
    }
}

int getMinValue(Node *root)
{
    if (root == NULL)
    {
        cout << "Error: Tree is empty." << endl;
        return -1;
    }

    while (root->left != NULL)
        root = root->left;

    return root->data;
}

Node *swapNodes(Node *root)
{
    if (root == NULL)
        return NULL;

    Node *temp = root->left;
    root->left = root->right;
    root->right = temp;

    root->left = swapNodes(root->left);
    root->right = swapNodes(root->right);

    return root;
}

bool search(Node *root, int key)
{
    if (root == NULL)
        return false;

    if (root->data == key)
        return true;

    if (key <= root->data)
        return search(root->left, key);
    else
        return search(root->right, key);
}

void bfsTraversal(Node *root)
{
    if (root == NULL)
    {
        cout << "Error: Tree is empty." << endl;
        return;
    }

    queue<Node *> q;
    q.push(root);

    while (!q.empty())
    {
        Node *current = q.front();
        q.pop();

        cout << current->data << " ";

        if (current->left != NULL)
            q.push(current->left);

        if (current->right != NULL)
            q.push(current->right);
    }
}

void displayMenu()
{
    cout << "1. Insert a new node" << endl;
    cout << "2. Find number of nodes in longest path from root" << endl;
    cout << "3. Find minimum data value in the tree" << endl;
    cout << "4. Swap left and right pointers at every node" << endl;
    cout << "5. Search for a value" << endl;
    cout << "6. Perform BFS traversal" << endl;
    cout << "7. Exit" << endl;
    cout << "Enter your choice: ";
}

int main()
{
    Node *root = NULL;

    int choice;
    int value;
    int height;
    int minValue;
    int searchValue;
    bool found;

    do
    {
        displayMenu();
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter the value to insert: ";
            cin >> value;
            root = insert(root, value);
            cout << "Value inserted successfully!" << endl;
            break;
        case 2:
            height = getHeight(root);
            cout << "Number of nodes in longest path from root: " << height << endl;
            break;
        case 3:
            minValue = getMinValue(root);
            cout << "Minimum data value: " << minValue << endl;
            break;
        case 4:
            root = swapNodes(root);
            cout << "Left and right pointers swapped at every node!" << endl;
            break;
        case 5:
            cout << "Enter the value to search: ";
            cin >> searchValue;
            found = search(root, searchValue);
            if (found)
                cout << "Value " << searchValue << " found in the tree." << endl;
            else
                cout << "Value " << searchValue << " not found in the tree." << endl;
            break;
        case 6:
            cout << "BFS traversal: ";
            bfsTraversal(root);
            cout << endl;
            break;
        case 7:
            cout << "Exiting program..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }

        cout << endl;
    } while (choice != 7);

    return 0;
}

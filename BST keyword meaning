#include <iostream>
#include <string>
using namespace std;

// Node structure for BST
struct Node
{
    string keyword;
    string meaning;
    Node *left;
    Node *right;
};

// Class for Dictionary
class Dictionary
{
private:
    Node *root;

public:
    Dictionary()
    {
        root = nullptr;
    }

    // Function to add a keyword and its meaning to the dictionary
    void addKeyword(string keyword, string meaning)
    {
        root = insertNode(root, keyword, meaning);
    }

    // Function to delete a keyword from the dictionary
    void deleteKeyword(string keyword)
    {
        root = deleteNode(root, keyword);
    }

    // Function to update the meaning of a keyword in the dictionary
    void updateKeyword(string keyword, string newMeaning)
    {
        Node *node = searchNode(root, keyword);
        if (node != nullptr)
        {
            node->meaning = newMeaning;
            cout << "Meaning updated successfully!" << endl;
        }
        else
        {
            cout << "Keyword not found!" << endl;
        }
    }

    // Function to display all keywords and meanings in ascending order
    void displayAscending()
    {
        if (root == nullptr)
        {
            cout << "Dictionary is empty!" << endl;
            return;
        }

        cout << "Dictionary (Ascending Order):" << endl;
        displayAscendingHelper(root);
    }

    // Function to display all keywords and meanings in descending order
    void displayDescending()
    {
        if (root == nullptr)
        {
            cout << "Dictionary is empty!" << endl;
            return;
        }

        cout << "Dictionary (Descending Order):" << endl;
        displayDescendingHelper(root);
    }

    // Function to find the maximum number of comparisons required to find a keyword
    int findMaxComparisons(string keyword)
    {
        return findMaxComparisonsHelper(root, keyword, 0);
    }

private:
    // Helper function to insert a node into the BST
    Node *insertNode(Node *root, string keyword, string meaning)
    {
        if (root == nullptr)
        {
            Node *newNode = new Node;
            newNode->keyword = keyword;
            newNode->meaning = meaning;
            newNode->left = nullptr;
            newNode->right = nullptr;
            return newNode;
        }

        if (keyword < root->keyword)
        {
            root->left = insertNode(root->left, keyword, meaning);
        }
        else if (keyword > root->keyword)
        {
            root->right = insertNode(root->right, keyword, meaning);
        }
        else
        {
            cout << "Keyword already exists!" << endl;
        }
        return root;
    }

    // Helper function to delete a node from the BST
    Node *deleteNode(Node *root, string keyword)
    {
        if (root == nullptr)
        {
            return root;
        }

        if (keyword < root->keyword)
        {
            root->left = deleteNode(root->left, keyword);
        }
        else if (keyword > root->keyword)
        {
            root->right = deleteNode(root->right, keyword);
        }
        else
        {
            if (root->left == nullptr)
            {
                Node *temp = root->right;
                delete root;
                return temp;
            }
            else if (root->right == nullptr)
            {
                Node *temp = root->left;
                delete root;
                return temp;
            }

            Node *successor = findSuccessor(root->right);
            root->keyword = successor->keyword;
            root->meaning = successor->meaning;
            root->right = deleteNode(root->right, successor->keyword);
        }
        return root;
    }

    // Helper function to find the successor node in the BST
    Node *findSuccessor(Node *node)
    {
        while (node->left != nullptr)
        {
            node = node->left;
        }
        return node;
    }

    // Helper function to search for a node in the BST
    Node *searchNode(Node *root, string keyword)
    {
        if (root == nullptr || root->keyword == keyword)
        {
            return root;
        }

        if (keyword < root->keyword)
        {
            return searchNode(root->left, keyword);
        }
        else
        {
            return searchNode(root->right, keyword);
        }
    }

    // Helper function to display all keywords and meanings in ascending order
    void displayAscendingHelper(Node *root)
    {
        if (root != nullptr)
        {
            displayAscendingHelper(root->left);
            cout << "Keyword: " << root->keyword << ", Meaning: " << root->meaning << endl;
            displayAscendingHelper(root->right);
        }
    }

    // Helper function to display all keywords and meanings in descending order
    void displayDescendingHelper(Node *root)
    {
        if (root != nullptr)
        {
            displayDescendingHelper(root->right);
            cout << "Keyword: " << root->keyword << ", Meaning: " << root->meaning << endl;
            displayDescendingHelper(root->left);
        }
    }

    // Helper function to find the maximum number of comparisons required to find a keyword
    int findMaxComparisonsHelper(Node *root, string keyword, int count)
    {
        if (root == nullptr || root->keyword == keyword)
        {
            return count;
        }

        if (keyword < root->keyword)
        {
            return findMaxComparisonsHelper(root->left, keyword, count + 1);
        }
        else
        {
            return findMaxComparisonsHelper(root->right, keyword, count + 1);
        }
    }
};

int main()
{
    Dictionary dictionary;
    int choice;
    string keyword, meaning;

    while (true)
    {
        cout << "----------------------" << endl;
        cout << "Dictionary Menu:" << endl;
        cout << "1. Add Keyword" << endl;
        cout << "2. Delete Keyword" << endl;
        cout << "3. Update Meaning" << endl;
        cout << "4. Display Ascending Order" << endl;
        cout << "5. Display Descending Order" << endl;
        cout << "6. Find Maximum Comparisons" << endl;
        cout << "7. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        cout << "----------------------" << endl;

        switch (choice)
        {
        case 1:
            cout << "Enter keyword: ";
            cin >> keyword;
            cout << "Enter meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dictionary.addKeyword(keyword, meaning);
            cout << "Keyword added successfully!" << endl;
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            cin >> keyword;
            dictionary.deleteKeyword(keyword);
            break;
        case 3:
            cout << "Enter keyword to update meaning: ";
            cin >> keyword;
            cout << "Enter new meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dictionary.updateKeyword(keyword, meaning);
            break;
        case 4:
            dictionary.displayAscending();
            break;
        case 5:
            dictionary.displayDescending();
            break;
        case 6:
            cout << "Enter keyword to find maximum comparisons: ";
            cin >> keyword;
            cout << "Maximum comparisons required: " << dictionary.findMaxComparisons(keyword) << endl;
            break;
        case 7:
            cout << "Exiting program..." << endl;
            exit(0);
        default:
            cout << "Invalid choice! Please try again." << endl;
            break;
        }
    }

    return 0;
}
